require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/products", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Product. As you add validations to Product, be sure to
  # adjust the attributes here as well.
  let(:store_section) { StoreSection.create(name: "Seccion de Tienda 1") }

  let(:valid_attributes) {
    {
      name: "MyString",
      store_name: "MyString",
      store_section: store_section,
      purchased: false,
      quantity: 1,
      purchase_date: Date.today
    }
  }

  let(:invalid_attributes) {
    {
      name: nil,
      store_name: "MyString",
      store_section: store_section,
      purchased: false,
      quantity: 1,
      purchase_date: Date.today
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Product.create! valid_attributes
      get products_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      product = Product.create! valid_attributes
      get product_url(product)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_product_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      product = Product.create! valid_attributes
      get edit_product_url(product)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      let!(:valid_attributes) do
        {
          name: "MyString",
          store_name: "MyString",
          store_section_name: store_section.name,
          purchased: false,
          quantity: 1,
          purchase_date: Date.today
        }
      end
      it "creates a new Product" do
        expect {
          post products_url, params: valid_attributes
        }.to change(Product, :count).by(1)
      end

      it "redirects to the created product" do
        post products_url, params: valid_attributes
        expect(response).to redirect_to(products_url)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Product" do
        expect {
          post products_url, params: { product: invalid_attributes }
        }.to change(Product, :count).by(0)
      end

    
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post products_url, params: { product: invalid_attributes }
        expect(response).to have_http_status(:ok)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      it "updates the requested product" do
        product = Product.create! valid_attributes
        patch product_url(product)
        product.reload
        expect(product.purchased).to eq(true)
      end

      it "redirects to the product" do
        product = Product.create! valid_attributes
        patch product_url(product)
        product.reload
        expect(response).to redirect_to(products_url)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested product" do
      product = Product.create! valid_attributes
      expect {
        delete product_url(product)
      }.to change(Product, :count).by(-1)
    end

    it "redirects to the products list" do
      product = Product.create! valid_attributes
      delete product_url(product)
      expect(response).to redirect_to(products_url)
    end
  end
end
